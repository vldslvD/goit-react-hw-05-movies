{"version":3,"file":"static/js/736.420d8e48.chunk.js","mappings":"gRACaA,EAAWC,EAAAA,EAAAA,GAAH,iGAMRC,EAAWD,EAAAA,EAAAA,GAAH,oEAURE,GANQF,EAAAA,EAAAA,IAAH,oGAMYA,EAAAA,EAAAA,IAAH,2C,SC8B3B,EA1Ca,WACX,OAAwBG,EAAAA,EAAAA,UAAS,CAAC,GAAlC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIH,EAAU,WAFd,UAG2BI,EAAAA,EAAAA,IAAiBH,GAH5C,OAGUI,EAHV,OAIIP,EAAQO,EAASC,KAAKT,MACtBG,EAAU,YALd,gDAOIA,EAAU,YACVO,MAAM,EAAD,IART,0DADc,uBAAC,WAAD,wBAadC,EACD,GAAE,CAACP,KAEF,yBACc,aAAXF,IACC,UAACP,EAAD,WACmB,IAAhBK,EAAKY,QAAgBZ,EAAKa,KAAI,SAAAC,GAC3B,OACE,UAACjB,EAAD,YACE,SAACC,EAAD,WACE,gBAAKiB,MAAM,QAAQC,IAAKF,EAAKG,aAAL,0CAAuDH,EAAKG,cAAiB,0DACrGC,IAAI,QAEN,wBAAKJ,EAAKK,QACV,0BAAOL,EAAKM,cANCN,EAAKO,GASzB,IACgB,IAAhBrB,EAAKY,SAAgB,iDAK/B,C,+LC7CM,SAAeU,IAAtB,4CAAO,OAAP,oBAAO,6FACLC,EAAAA,EAAAA,SAAAA,QAAyB,gCACnBC,EAAU,CACdC,OAAQ,CACNC,QAAS,oCAEXC,QAAS,CACPC,OAAQ,qBAPP,SAUkBL,EAAAA,EAAAA,IAAU,qBAAsBC,GAVlD,cAUCK,EAVD,yBAYEA,GAZF,kEAeA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,gFACLR,EAAAA,EAAAA,SAAAA,QAAyB,gCACnBC,EAAU,CACdC,OAAQ,CACNC,QAAS,oCAEXC,QAAS,CACPC,OAAQ,qBAPP,SAUkBL,EAAAA,EAAAA,IAAA,6BAAgCQ,EAAOC,QAAQ,KAAM,MAAQR,GAV/E,cAUCK,EAVD,yBAYEA,GAZF,kEAeA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA4B7B,GAA5B,gFACLmB,EAAAA,EAAAA,SAAAA,QAAyB,gCACnBC,EAAU,CACdC,OAAQ,CACNC,QAAS,oCAEXC,QAAS,CACPC,OAAQ,qBAPP,SAUkBL,EAAAA,EAAAA,IAAA,gBAAmBnB,GAAWoB,GAVhD,cAUCK,EAVD,yBAYEA,GAZF,kEAeA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAmC9B,GAAnC,gFACLmB,EAAAA,EAAAA,SAAAA,QAAyB,gCACnBC,EAAU,CACdC,OAAQ,CACNC,QAAS,oCAEXC,QAAS,CACPC,OAAQ,qBAPP,SAUkBL,EAAAA,EAAAA,IAAA,gBAAmBnB,EAAnB,YAAsCoB,GAVxD,cAUCK,EAVD,yBAYEA,GAZF,kEAeA,SAAetB,EAAtB,+CAAO,OAAP,oBAAO,WAAgCH,GAAhC,gFACLmB,EAAAA,EAAAA,SAAAA,QAAyB,gCACnBC,EAAU,CACdC,OAAQ,CACNC,QAAS,oCAEXC,QAAS,CACPC,OAAQ,qBAPP,SAUkBL,EAAAA,EAAAA,IAAA,gBAAmBnB,EAAnB,YAAsCoB,GAVxD,cAUCK,EAVD,yBAYEA,GAZF,kE","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","moviesAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\nexport const StyledUl = styled.ul`\n  display: flex;\n  list-style: none;\n  gap: 10px;\n  flex-wrap: wrap;\n`;\nexport const StyledLi = styled.li`\n  text-decoration: none;\n  height: 380px;\n`;\nexport const Image = styled.img`\n  display: block;\n  object-fit: contain;\n  width: 100%;\n  height: 100%;\n`;\nexport const ImageContainer = styled.div`\n  height: 300px;\n`;","import { getMovieCastById } from 'moviesAPI';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ImageContainer, StyledLi, StyledUl } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState({});\n  const [status, setStatus] = useState('idle');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchMovieCastById() {\n      try {\n        setStatus('pending');\n        const castData = await getMovieCastById(movieId);\n        setCast(castData.data.cast);\n        setStatus('resolved');\n      } catch (error) {\n        setStatus('rejected');\n        alert(error);\n        \n      }\n    }\n    fetchMovieCastById();\n  }, [movieId]);\n  return (\n    <div>\n      {status === 'resolved' && (\n        <StyledUl>\n          {cast.length !== 0 && cast.map(item => {\n              return (\n                <StyledLi key={item.id}>\n                  <ImageContainer>\n                    <img width=\"200px\" src={item.profile_path ? `https://image.tmdb.org/t/p/w300/${item.profile_path}` : 'https://cdn-icons-png.flaticon.com/512/4054/4054617.png'}\n                    alt=\"\" />\n                  </ImageContainer>\n                  <h3>{item.name}</h3>\n                  <span>{item.character}</span>\n                </StyledLi>\n              );\n          })}\n          {cast.length === 0 && <p>There are no cast</p>}\n        </StyledUl>\n      )}\n    </div>\n  );\n};\nexport default Cast;\n","import axios from 'axios';\nexport async function getMovies() {\n  axios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n  const options = {\n    params: {\n      api_key: '148118ff38ec61bf8d4b2aa895c3f69e',\n    },\n    headers: {\n      accept: 'application/json',\n    },\n  };\n  const response = await axios.get('trending/movie/day', options);\n\n  return response;\n}\n\nexport async function getMoviesByName(search) {\n  axios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n  const options = {\n    params: {\n      api_key: '148118ff38ec61bf8d4b2aa895c3f69e',\n    },\n    headers: {\n      accept: 'application/json',\n    },\n  };\n  const response = await axios.get(`search/movie?query=${search.replace(/ /g, '+')}`, options);\n\n  return response;\n}\n\nexport async function getMovieById(movieId) {\n  axios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n  const options = {\n    params: {\n      api_key: '148118ff38ec61bf8d4b2aa895c3f69e',\n    },\n    headers: {\n      accept: 'application/json',\n    },\n  };\n  const response = await axios.get(`movie/${movieId}`, options);\n\n  return response;\n}\n\nexport async function getMovieReviewsById(movieId) {\n  axios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n  const options = {\n    params: {\n      api_key: '148118ff38ec61bf8d4b2aa895c3f69e',\n    },\n    headers: {\n      accept: 'application/json',\n    },\n  };\n  const response = await axios.get(`movie/${movieId}/reviews`, options);\n\n  return response;\n}\n\nexport async function getMovieCastById(movieId) {\n  axios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n  const options = {\n    params: {\n      api_key: '148118ff38ec61bf8d4b2aa895c3f69e',\n    },\n    headers: {\n      accept: 'application/json',\n    },\n  };\n  const response = await axios.get(`movie/${movieId}/credits`, options);\n\n  return response;\n}"],"names":["StyledUl","styled","StyledLi","ImageContainer","useState","cast","setCast","status","setStatus","movieId","useParams","useEffect","getMovieCastById","castData","data","alert","fetchMovieCastById","length","map","item","width","src","profile_path","alt","name","character","id","getMovies","axios","options","params","api_key","headers","accept","response","getMoviesByName","search","replace","getMovieById","getMovieReviewsById"],"sourceRoot":""}